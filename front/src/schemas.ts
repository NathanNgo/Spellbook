import { z } from "zod";

export const SpellSchema = z.object({
    id: z.number(),
    name: z.string(),
    school: z.string(),
    subschool: z.string(),
    descriptor: z.string(),
    spellLevel: z.string(),
    castingTime: z.string(),
    components: z.string(),
    costlyComponents: z.boolean(),
    range: z.string(),
    area: z.string(),
    effect: z.string(),
    targets: z.string(),
    duration: z.string(),
    dismissible: z.boolean(),
    shapeable: z.boolean(),
    savingThrow: z.string(),
    spellResistance: z.string(),
    description: z.string(),
    descriptionFormatted: z.string(),
    source: z.string(),
    fullText: z.string(),
    verbal: z.boolean(),
    somatic: z.boolean(),
    material: z.boolean(),
    focus: z.boolean(),
    divineFocus: z.boolean(),
    sor: z.number().nullable(),
    wiz: z.number().nullable(),
    cleric: z.number().nullable(),
    druid: z.number().nullable(),
    ranger: z.number().nullable(),
    bard: z.number().nullable(),
    paladin: z.number().nullable(),
    alchemist: z.number().nullable(),
    summoner: z.number().nullable(),
    witch: z.number().nullable(),
    inquisitor: z.number().nullable(),
    oracle: z.number().nullable(),
    antipaladin: z.number().nullable(),
    magus: z.number().nullable(),
    adept: z.number().nullable(),
    bloodrager: z.number().nullable(),
    shaman: z.number().nullable(),
    psychic: z.number().nullable(),
    medium: z.number().nullable(),
    mesmerist: z.number().nullable(),
    occultist: z.number().nullable(),
    spiritualist: z.number().nullable(),
    skald: z.number().nullable(),
    investigator: z.number().nullable(),
    hunter: z.number().nullable(),
    summonerUnchained: z.number().nullable(),
    deity: z.string(),
    SLALevel: z.number().nullable(),
    domain: z.string(),
    shortDescription: z.string(),
    acid: z.boolean(),
    chaotic: z.boolean(),
    cold: z.boolean(),
    curse: z.boolean(),
    darkness: z.boolean(),
    death: z.boolean(),
    disease: z.boolean(),
    earth: z.boolean(),
    electricity: z.boolean(),
    emotion: z.boolean(),
    evil: z.boolean(),
    fear: z.boolean(),
    fire: z.boolean(),
    force: z.boolean(),
    good: z.boolean(),
    languageDependent: z.boolean(),
    lawful: z.boolean(),
    light: z.boolean(),
    mindAffecting: z.boolean(),
    pain: z.boolean(),
    shadow: z.boolean(),
    sonic: z.boolean(),
    water: z.boolean(),
    ruse: z.boolean(),
    draconic: z.boolean(),
    meditative: z.boolean(),
    mythic: z.boolean(),
    linktext: z.string(),
    materialCosts: z.number().nullable(),
    bloodline: z.string(),
    patron: z.string(),
    mythicText: z.string(),
    augmented: z.string(),
    hauntStatistics: z.string(),
});
export type Spell = z.infer<typeof SpellSchema>;
export const SpellArraySchema = z.array(SpellSchema);

export const ManifestSpellDetailSchema = z.object({
    name: z.string(),
    id: z.number(),
    shortDescription: z.string(),
    duration: z.string(),
    range: z.string(),
    savingThrow: z.string(),
    spellResistance: z.string(),
    castingTime: z.string(),
    sor: z.number().nullable(),
    wiz: z.number().nullable(),
    cleric: z.number().nullable(),
    druid: z.number().nullable(),
    ranger: z.number().nullable(),
    bard: z.number().nullable(),
    paladin: z.number().nullable(),
    alchemist: z.number().nullable(),
    summoner: z.number().nullable(),
    witch: z.number().nullable(),
    inquisitor: z.number().nullable(),
    oracle: z.number().nullable(),
    antipaladin: z.number().nullable(),
    magus: z.number().nullable(),
    adept: z.number().nullable(),
    bloodrager: z.number().nullable(),
    shaman: z.number().nullable(),
    psychic: z.number().nullable(),
    medium: z.number().nullable(),
    mesmerist: z.number().nullable(),
    occultist: z.number().nullable(),
    spiritualist: z.number().nullable(),
    skald: z.number().nullable(),
    investigator: z.number().nullable(),
    hunter: z.number().nullable(),
    summonerUnchained: z.number().nullable(),
});
export type ManifestSpellDetail = z.infer<typeof ManifestSpellDetailSchema>;
export const ManifestSpellDetailArraySchema = z.array(
    ManifestSpellDetailSchema
);
